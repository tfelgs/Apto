[{"/Users/dylanfelgenhauer/Desktop/react-app/react-application/search-tool/src/index.js":"1","/Users/dylanfelgenhauer/Desktop/react-app/react-application/search-tool/src/reportWebVitals.js":"2","/Users/dylanfelgenhauer/Desktop/react-app/react-application/search-tool/src/App.js":"3","/Users/dylanfelgenhauer/Desktop/react-app/react-application/search-tool/src/Utility.js":"4","/Users/dylanfelgenhauer/Desktop/react-app/apto/src/index.js":"5","/Users/dylanfelgenhauer/Desktop/react-app/apto/src/App.js":"6","/Users/dylanfelgenhauer/Desktop/react-app/apto/src/reportWebVitals.js":"7","/Users/dylanfelgenhauer/Desktop/react-app/apto/src/Utility.js":"8"},{"size":500,"mtime":1633469280587,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1633387120533,"results":"11","hashOfConfig":"10"},{"size":18663,"mtime":1636569496363,"results":"12","hashOfConfig":"10"},{"size":2653,"mtime":1635188420286,"results":"13","hashOfConfig":"10"},{"size":500,"mtime":1633469280587,"results":"14","hashOfConfig":"15"},{"size":778,"mtime":1658949232517,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1633387120533,"results":"17","hashOfConfig":"15"},{"size":2653,"mtime":1635188420286,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"12wnhug",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"1ly5lom",{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"/Users/dylanfelgenhauer/Desktop/react-app/react-application/search-tool/src/index.js",[],["39","40"],"/Users/dylanfelgenhauer/Desktop/react-app/react-application/search-tool/src/reportWebVitals.js",[],"/Users/dylanfelgenhauer/Desktop/react-app/react-application/search-tool/src/App.js",["41","42"],"import './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport React, { useState, useEffect } from 'react'\nimport { Dropdown, Input, Grid, Button, Form, Select, Container, Segment, Divider, Pagination} from 'semantic-ui-react'\nimport { getOptions, getMetrics, getMeasures, getTimeOptions, getOperatorOptions } from './Utility';\nimport 'react-datez/dist/css/react-datez.css';\nimport { ReactDatez } from 'react-datez'\nimport { toKeyAlias } from '@babel/types';\n\n\nfunction App() {\n  const [startDate, setStartDate] = useState(\"\")\n  const [endDate, setEndDate] = useState(\"\")\n  const [restaurantIds, setRestaurantIds] = useState([]);\n  const [fromHour, setFromHour] = useState(6);\n  const [toHour, setToHour] = useState(29);\n  const [criteria, setCriteria] = useState([{ metricCode: \"\", compareType : \"\", value: 0, operatorType: \"And\" }]);\n  const [totalResults, setTotalResults] = useState([]);\n  const [resultsOnPage, setResultsOnPage] = useState([]);\n  const [activePage, setActivePage] = useState(1);\n  const [formUrl, setFormUrl] = useState(\"\");\n  const [resultsUrl, setResultsUrl] = useState(\"\");\n  const numberOfItemsOnPage = 20\n\nlet handleChange = (index, data) => {\n    let newCriteria = [...criteria];\n    if (data.name === \"value\") {\n        if (data.value === '') {\n            newCriteria[index][data.name] = '';\n        }\n        else {\n            newCriteria[index][data.name] = parseInt(data.value);\n        }\n    }\n    else {\n        newCriteria[index][data.name] = data.value;\n    }\n    setCriteria(newCriteria);\n    fixDate()\n}\n\nlet addCriteria = () => {\n    setCriteria([...criteria, { metricCode: \"\", compareType : \"\", value: 0, operatorType: \"\" }])\n}\n\nlet removeCriteria = (i) => {\n    let newCriteria = [...criteria];\n    newCriteria.splice(i, 1);\n    setCriteria(newCriteria)\n}\n\nlet onSubmit = () => {\n    userPush()\n}\n\nlet onSubmitForm = () => {\n    urlPush()\n}\n\nlet fixDate = () => {\n        var temp = startDate\n        var tempr = endDate\n    if (temp.length > 19) {\n        for (var i=0;i<6;i++) {\n            temp = temp.slice(0, -1)\n            tempr = tempr.slice(0, -1)\n        }\n        setStartDate(temp)\n        setEndDate(tempr)\n    }\n}\n\nlet createData = () => {\n    const initialFormData = {\n        restaurantIds: restaurantIds,\n        fromDate: startDate,\n        toDate: endDate,\n        fromHour: fromHour,\n        toHour: toHour,\n        metricCriteria: criteria\n    };\n    const totalResultss = JSON.stringify(initialFormData)\n    setResultsUrl(totalResultss)\n    return totalResultss\n}\n\nlet pageResultsCreator = (newPage) => {\n    var startNum = ((newPage - 1) * numberOfItemsOnPage)\n    var lengthNum = totalResults.length -1\n    var endNum = (newPage * numberOfItemsOnPage) - 1\n    var realEndNumber = Math.min(lengthNum, endNum)\n    var resultsList = []\n    for (var i=0;i<=realEndNumber;i++) {\n        if (i >= startNum) {\n            resultsList.push(totalResults[i])\n        }\n    }\n    setResultsOnPage(resultsList)\n}\n\nconst onChange = (index, pageInfo) => {\n    setActivePage(pageInfo.activePage);\n    pageResultsCreator(pageInfo.activePage);\n};\n\nlet timeFix = (data) => {\n    let x = data.substring(11,16)\n    return x\n}\n\nlet dateFix = (data) => {\n    let x = data.substring(0,10)\n    return x\n}\n\nconst userPush = async () => {\n    let xxx = createData()\n    const response = await fetch('https://customsearchqueryapi.azurewebsites.net/Search/Query', {\n      method: 'POST',\n      body: xxx, // string or object\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    let temp = await response.json() //extract JSON from the http response\n    let tempr = []\n    for (var i=0;i<temp.length;i++) {\n        tempr.push(temp[i])\n    }\n    setTotalResults(tempr)\n  }\n\nconst urlPush = async () => {\n    let xxx = formUrl\n    const response = await fetch('https://customsearchqueryapi.azurewebsites.net/Search/Query', {\n      method: 'POST',\n      body: xxx, // string or object\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    let result = await response.json()\n    let tempr = []\n    for (var i=0;i<result.length;i++) {\n        tempr.push(result[i])\n    }\n    setResultsUrl(formUrl)\n    setTotalResults(tempr)\n}\n\nuseEffect(() => {\n    pageResultsCreator(1)\n}, [totalResults]);\n\n\n  return (\n    <div className=\"App\">\n            <Grid>\n                <Grid.Row>\n                    <Container>\n                        <Segment className=\"Segment\">\n                            <Grid centered>\n                                <Grid.Row columns=\"1\">\n                                    <Grid.Column textAlign=\"center\">\n                                        <h3>Custom Search Query Tool</h3>\n                                    </Grid.Column>\n                                </Grid.Row>\n                                <Grid.Row columns=\"1\">\n                                <Grid.Column textAlign=\"center\">\n                                        <h4>Search with preset data</h4>\n                                </Grid.Column>\n                                    <Grid.Column>\n                                        <Form onSubmit={() => onSubmitForm()}>\n                                            <Form.Field\n                                                name=\"Form Data\"\n                                                control={Input}\n                                                label={\"Form Data\"}\n                                                placeholder='Form Data'\n                                                onChange={(event, data) => setFormUrl(data.value)}\n                                                value={formUrl}\n                                            />\n                                            <Form.Field>\n                                                <Button color=\"olive\" type=\"submit\">\n                                                    Submit\n                                                </Button>\n                                            </Form.Field>\n                                        </Form>\n                                </Grid.Column>\n                                <Grid.Column textAlign=\"center\">\n                                        <h4>Or</h4>\n                                </Grid.Column>\n                                <Grid.Column textAlign=\"center\">\n                                        <h4>Search with selected parameters</h4>\n                                </Grid.Column>\n                                    <Grid.Column>\n                                        <Form onSubmit={() => onSubmit()} >\n                                            <Form.Field>\n                                                <label style={{fontWeight: \"bold\"}}>Restaurant Id</label>\n                                                <Dropdown\n                                                    options={getOptions}\n                                                    placeholder={\"Select Restaurant Id\"}\n                                                    multiple\n                                                    selection\n                                                    onChange={(event, data) => setRestaurantIds(data.value)}\n                                                    value={restaurantIds}\n                                                />\n                                            </Form.Field>\n                                            <Form.Group>\n                                                <Form.Field\n                                                    control={Select}\n                                                    label={\"Transaction Time Start\"}\n                                                    options={getTimeOptions}\n                                                    value={fromHour}\n                                                    onChange={(event, data) => setFromHour(data.value)}\n                                                />\n                                                <Form.Field\n                                                    control={Select}\n                                                    label={\"Transaction Time End\"}\n                                                    options={getTimeOptions}\n                                                    value={toHour}\n                                                    onChange={(event, data) => setToHour(data.value)}\n                                                />\n                                                <Form.Field>\n                                                <label htmlFor=\"exampleDate2\">Start Date</label>\n                                                <ReactDatez\n                                                    name=\"dateInput\"\n                                                    startDate=\"01/01/2000\"\n                                                    endDate= {new Date()}\n                                                    handleChange={value => {\n                                                    setStartDate(value);\n                                                    }}\n                                                    value={startDate}\n                                                    allowPast= { true }\n                                                    dateFormat= \"MM/DD/YYYY\"\n                                                />\n                                                </Form.Field>\n                                                <Form.Field>\n                                                <label htmlFor=\"exampleDate2\">End Date</label>\n                                                <ReactDatez\n                                                    name=\"dateInput\"\n                                                    startDate=\"01/01/2000\"\n                                                    endDate= {new Date()}\n                                                    handleChange={value => {\n                                                    setEndDate(value);\n                                                    }}\n                                                    value={endDate}\n                                                    allowPast= { true }\n                                                    dateFormat= \"MM/DD/YYYY\"\n                                                />\n                                                </Form.Field>\n                                            </Form.Group>\n                                            {criteria.map((crit, index) => (\n                                                    <Form.Group>\n                                                        <Form.Field\n                                                            name=\"metricCode\"\n                                                            control={Select}\n                                                            options={getMetrics}\n                                                            label={\"Metric to Measure by\"}\n                                                            placeholder='Choose Metric'\n                                                            value={crit.metricCode}\n                                                            onChange={(event, data) => handleChange(index, data)}\n                                                        />\n                                                        <Form.Field\n                                                            name=\"compareType\"\n                                                            control={Select}\n                                                            label={\"Measure\"}\n                                                            options={getMeasures}\n                                                            placeholder='Measure'\n                                                            onChange={(event, data) => handleChange(index, data)}\n                                                            value={crit.compareType}\n                                                        />\n                                                        <Form.Field\n                                                            name=\"value\"\n                                                            control={Input}\n                                                            label={\"Value\"}\n                                                            placeholder='Value'\n                                                            onChange={(event, data) => handleChange(index, data)}\n                                                            value={crit.value}\n                                                        />\n                                                        <Form.Field\n                                                            name=\"operatorType\"\n                                                            control={Select}\n                                                            label={\"Operator\"}\n                                                            options={getOperatorOptions}\n                                                            placeholder='Operator Options'\n                                                            onChange={(event, data) => handleChange(index, data)}\n                                                            value={crit.operatorType}\n                                                        />\n                                                        <Form.Field>\n                                                            {\n                                                                index ?\n                                                                <Button onClick={() => removeCriteria(index)}  color=\"red\">Remove</Button>\n                                                                : null\n                                                            }\n                                                        </Form.Field>\n                                                    </Form.Group>\n                                                ))}\n                                            <Form.Group>\n                                                <Form.Field>\n                                                    <Button className='ui button' onClick={() => addCriteria()} color=\"violet\">Add Criteria</Button>\n                                                </Form.Field>\n                                            </Form.Group>\n                                            <Form.Field>\n                                                <Button color=\"olive\" type=\"submit\">\n                                                    Submit\n                                                </Button>\n                                            </Form.Field>\n                                        </Form>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                        </Segment>\n                    </Container>\n                </Grid.Row>\n                <Divider hidden></Divider>\n                <Grid.Row>\n                    <Container>\n                        <Segment>\n                            <h3>\n                                Results\n                                <Pagination className=\"Pagentation\" activePage={activePage} onPageChange={onChange} totalPages={Math.ceil((totalResults.length)/20)} ellipsisItem={null}/>\n                                <h4>\n                                    Data parameters for results: {resultsUrl}\n                                </h4>\n                            </h3>\n                                <table class=\"ui celled table\">\n                                    <thead>\n                                        <tr>\n                                        <th>Order Number</th>\n                                        <th>Resturant ID</th>\n                                        <th>Date</th>\n                                        <th>Net Amount</th>\n                                        <th>Total Amount</th>\n                                        <th>Items Sold</th>\n                                        <th>Beverage Quantity</th>\n                                        <th>Discount Amount</th>\n                                        <th>Discount Ratio</th>\n                                        <th>Deleted Items</th>\n                                        <th>Order Time</th>\n                                        <th>Refund Amount</th>\n                                </tr></thead>\n                                    {resultsOnPage.map((criti, index) => (\n                                            <tbody>\n                                                <tr>\n                                                <td data-label=\"Order Number\">{resultsOnPage[index].orderNumber}</td>\n                                                <td data-label=\"Resturant ID\">{resultsOnPage[index].restaurantId}</td>\n                                                <td data-label=\"Date\">{dateFix(resultsOnPage[index].busDt)}</td>\n                                                <td data-label=\"Net Amount\">{\"$\" + resultsOnPage[index].netAmount.toFixed(2)}</td>\n                                                <td data-label=\"Total Amount\">{\"$\" + resultsOnPage[index].totalAmount.toFixed(2)}</td>\n                                                <td data-label=\"Items Sold\">{resultsOnPage[index].itemSoldQty}</td>\n                                                <td data-label=\"Beverage Quantity\">{resultsOnPage[index].beverageQty}</td>\n                                                <td data-label=\"Discount Amount\">{\"$\" + resultsOnPage[index].discountAmount.toFixed(2)}</td>\n                                                <td data-label=\"Discount Ratio\">{(resultsOnPage[index].discountRatio * 100).toFixed(2) + \"%\"}</td>\n                                                <td data-label=\"Deleted Items\">{resultsOnPage[index].itemDeletedAmount}</td>\n                                                <td data-label=\"order Time\">{timeFix(resultsOnPage[index].orderTime)}</td>\n                                                <td data-label=\"Refund Amount\">{\"$\" + resultsOnPage[index].refundAmount.toFixed(2)}</td>\n                                                </tr>\n                                            </tbody>\n                                    ))}\n                                </table>\n                        </Segment>\n                    </Container>\n                </Grid.Row>\n            </Grid>\n        </div>\n  );\n}\n\nexport default App;\n","/Users/dylanfelgenhauer/Desktop/react-app/react-application/search-tool/src/Utility.js",[],"/Users/dylanfelgenhauer/Desktop/react-app/apto/src/index.js",[],["43","44"],"/Users/dylanfelgenhauer/Desktop/react-app/apto/src/App.js",["45","46","47","48","49","50","51"],"import './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport React, { useState, useEffect } from 'react'\n\n\n\nfunction App() {\n  \n\n\n  return (\n    <div>\n        <div class=\"ui secondary pointing menu\">\n            <a class=\"active item\">\n                Home\n            </a>\n            <a class=\"item\">\n                Supplements Index\n            </a>\n            <a class=\"item\">\n                Products on the Market\n            </a>\n            <a class=\"item\">\n                About\n            </a>\n            <div class=\"right menu\">\n                <a class=\"ui item\">\n                    Profile\n                </a>\n            </div>\n        </div>\n        <div class=\"ui segment\">\n            <p></p>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/dylanfelgenhauer/Desktop/react-app/apto/src/reportWebVitals.js",[],"/Users/dylanfelgenhauer/Desktop/react-app/apto/src/Utility.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":8,"column":10,"nodeType":"58","messageId":"59","endLine":8,"endColumn":20},{"ruleId":"60","severity":1,"message":"61","line":153,"column":4,"nodeType":"62","endLine":153,"endColumn":18,"suggestions":"63"},{"ruleId":"52","replacedBy":"64"},{"ruleId":"54","replacedBy":"65"},{"ruleId":"56","severity":1,"message":"66","line":3,"column":17,"nodeType":"58","messageId":"59","endLine":3,"endColumn":25},{"ruleId":"56","severity":1,"message":"67","line":3,"column":27,"nodeType":"58","messageId":"59","endLine":3,"endColumn":36},{"ruleId":"68","severity":1,"message":"69","line":14,"column":13,"nodeType":"70","endLine":14,"endColumn":36},{"ruleId":"68","severity":1,"message":"69","line":17,"column":13,"nodeType":"70","endLine":17,"endColumn":29},{"ruleId":"68","severity":1,"message":"69","line":20,"column":13,"nodeType":"70","endLine":20,"endColumn":29},{"ruleId":"68","severity":1,"message":"69","line":23,"column":13,"nodeType":"70","endLine":23,"endColumn":29},{"ruleId":"68","severity":1,"message":"69","line":27,"column":17,"nodeType":"70","endLine":27,"endColumn":36},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'toKeyAlias' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'pageResultsCreator'. Either include it or remove the dependency array.","ArrayExpression",["73"],["71"],["72"],"'useState' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},"Update the dependencies array to be: [pageResultsCreator, totalResults]",{"range":"76","text":"77"},[4267,4281],"[pageResultsCreator, totalResults]"]