{"ast":null,"code":"var _jsxFileName = \"/Users/dylanfelgenhauer/Desktop/react-app/search-tool/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport React, { useState } from 'react';\nimport { Dropdown, Input, Grid, Button, Form, Select, Container, Segment, Icon, Divider } from 'semantic-ui-react';\nimport DatePicker from 'react-datepicker';\nimport TimePicker from 'react-time-picker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { getOptions, getMetrics, getMeasures, getTimeOptions as compareTypeOptions, metricOptions, getTimeOptions } from './Utility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [restaurantIds, setRestaurantIds] = useState([]);\n  const [fromHour, setFromHour] = useState(6);\n  const [toHour, setToHour] = useState(29);\n  const initialFormData = {\n    restaurantIds: [],\n    fromDate: \"\",\n    toDate: \"\",\n    fromHour: 6,\n    toHour: 29,\n    metricCriteria: [{\n      metricCode: undefined,\n      compareType: undefined,\n      value: undefined,\n      operatorType: \"And\"\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(Segment, {\n            className: \"Segment\",\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              centered: true,\n              children: [/*#__PURE__*/_jsxDEV(Grid.Row, {\n                columns: \"1\",\n                children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n                  textAlign: \"center\",\n                  children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: \"Custom Search Query Tool\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 38,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 37,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n                columns: \"1\",\n                children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n                  children: /*#__PURE__*/_jsxDEV(Form\n                  /* onSubmit={() => onSubmit()} */\n                  , {\n                    children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        style: {\n                          fontWeight: \"bold\"\n                        },\n                        children: \"Restaurant Id\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 45,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                        options: getOptions,\n                        placeholder: \"Select Restaurant Id\",\n                        multiple: true,\n                        selection: true,\n                        onChange: (event, data) => setRestaurantIds(data.value),\n                        value: restaurantIds\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 46,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 44,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                      children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n                        control: Select,\n                        label: \"Transaction Time Start\",\n                        options: getTimeOptions,\n                        value: fromHour,\n                        onChange: (event, data) => setFromHour(data.value)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 56,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                        control: Select,\n                        label: \"Transaction Time End\",\n                        options: getTimeOptions,\n                        value: toHour,\n                        onChange: (event, data) => setToHour(data.value)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 63,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(DatePicker.Field, {\n                        selected: selectedDate,\n                        onChange: date => setSelectedDate(date),\n                        maxDate: new Date(),\n                        showYearDropdown: true,\n                        scrollableMonthYearDropdown: true,\n                        isClearable: true\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 70,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 55,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                      children: /*#__PURE__*/_jsxDEV(Form.Field, {\n                        children: /*#__PURE__*/_jsxDEV(Button\n                        /* onClick={() => addCriteria()} */\n                        , {\n                          color: \"violet\",\n                          children: \"Add Criteria\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 82,\n                          columnNumber: 53\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 81,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 80,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        color: \"olive\",\n                        type: \"submit\",\n                        children: \"Submit\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 87,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 86,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 43,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 42,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        hidden: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(Segment, {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Results\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n/* <div className=\"App\">\n      <Grid>\n      <h1 className = \"Title\">\n        Resturant Data Helper\n      </h1>\n      <div className = \"Together\">\n      <Dropdown\n      className = \"Rpad\"\n      multiple\n      selection\n      options={getOptions}\n      placeholder='Choose Resturants'\n      />\n      <DatePicker\n      selected={selectedDate}\n      onChange={date => setSelectedDate(date)}\n      maxDate={new Date()}\n      showYearDropdown\n      scrollableMonthYearDropdown\n      isClearable\n      />\n      <div className = \"App-row\">\n      <div className = \"App\">\n      <h3>From:</h3>\n      <h3>To:</h3>\n      </div>\n      <div className = \"App\">\n      <TimePicker\n      className = \"App-bot\"\n      disableClock = { true }\n      clearIcon = { false }\n      />\n      <TimePicker\n      disableClock = { true }\n      clearIcon = { false }\n      />\n      </div>\n      </div>\n      <Dropdown\n      className = \"Rpad\"\n      selection\n      options={getMetrics}\n      placeholder='Choose Metric'\n      />\n      <Dropdown\n      className = \"Width-change.Dropdown\"\n      selection\n      options={getMeasures}\n      placeholder='Measure'\n      fluid\n      />\n      <Input\n      size = 'small'\n      placeholder = 'Value'\n      />\n      </div>\n      </Grid>\n    </div> */\n\n\n_s(App, \"X9thNtm064zgdU9g6XAVrk/YIAk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/dylanfelgenhauer/Desktop/react-app/search-tool/src/App.js"],"names":["React","useState","Dropdown","Input","Grid","Button","Form","Select","Container","Segment","Icon","Divider","DatePicker","TimePicker","getOptions","getMetrics","getMeasures","getTimeOptions","compareTypeOptions","metricOptions","App","selectedDate","setSelectedDate","restaurantIds","setRestaurantIds","fromHour","setFromHour","toHour","setToHour","initialFormData","fromDate","toDate","metricCriteria","metricCode","undefined","compareType","value","operatorType","fontWeight","event","data","date","Date"],"mappings":"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","sourcesContent":["import './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport React, { useState } from 'react'\nimport { Dropdown, Input, Grid, Button, Form, Select, Container, Segment, Icon, Divider } from 'semantic-ui-react'\nimport DatePicker from 'react-datepicker'\nimport TimePicker from 'react-time-picker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport { getOptions, getMetrics, getMeasures, getTimeOptions as compareTypeOptions, metricOptions, getTimeOptions } from './Utility';\n\n\nfunction App() {\n  const [selectedDate, setSelectedDate] = useState(null)\n  const [restaurantIds, setRestaurantIds] = useState([]);\n  const [fromHour, setFromHour] = useState(6);\n  const [toHour, setToHour] = useState(29);\n  const initialFormData = {\n    restaurantIds: [],\n    fromDate: \"\",\n    toDate: \"\",\n    fromHour: 6,\n    toHour: 29,\n    metricCriteria: [{\n        metricCode: undefined,\n        compareType: undefined,\n        value: undefined,\n        operatorType: \"And\"\n    }]\n};\n  return (\n    <div className=\"App\">\n            <Grid>\n                <Grid.Row>\n                    <Container>\n                        <Segment className=\"Segment\">\n                            <Grid centered>\n                                <Grid.Row columns=\"1\">\n                                    <Grid.Column textAlign=\"center\">\n                                        <h3>Custom Search Query Tool</h3>\n                                    </Grid.Column>\n                                </Grid.Row>\n                                <Grid.Row columns=\"1\">\n                                    <Grid.Column>\n                                        <Form /* onSubmit={() => onSubmit()} */>\n                                            <Form.Field>\n                                                <label style={{fontWeight: \"bold\"}}>Restaurant Id</label>\n                                                <Dropdown\n                                                    options={getOptions}\n                                                    placeholder={\"Select Restaurant Id\"}\n                                                    multiple\n                                                    selection\n                                                    onChange={(event, data) => setRestaurantIds(data.value)}\n                                                    value={restaurantIds}\n                                                />\n                                            </Form.Field>\n                                            <Form.Group>\n                                                <Form.Field\n                                                    control={Select}\n                                                    label={\"Transaction Time Start\"}\n                                                    options={getTimeOptions}\n                                                    value={fromHour}\n                                                    onChange={(event, data) => setFromHour(data.value)}\n                                                />\n                                                <Form.Field\n                                                    control={Select}\n                                                    label={\"Transaction Time End\"}\n                                                    options={getTimeOptions}\n                                                    value={toHour}\n                                                    onChange={(event, data) => setToHour(data.value)}\n                                                />\n                                                <DatePicker.Field\n                                                    selected={selectedDate}\n                                                    onChange={date => setSelectedDate(date)}\n                                                    maxDate={new Date()}\n                                                    showYearDropdown\n                                                    scrollableMonthYearDropdown\n                                                    isClearable\n                                                />\n                                            </Form.Group>\n \n                                            <Form.Group>\n                                                <Form.Field>\n                                                    <Button /* onClick={() => addCriteria()} */ color=\"violet\">Add Criteria</Button>\n                                                </Form.Field>\n                                                \n                                            </Form.Group>\n                                            <Form.Field>\n                                                <Button color=\"olive\" type=\"submit\">\n                                                    Submit\n                                                </Button>\n                                            </Form.Field>\n                                        </Form>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                        </Segment>\n                    </Container>\n                </Grid.Row>\n                <Divider hidden></Divider>\n                <Grid.Row>\n                    <Container>\n                        <Segment>\n                            <h3>Results</h3>\n                        </Segment>\n                    </Container>\n                </Grid.Row>\n            </Grid>\n        </div>\n  );\n}\n/* <div className=\"App\">\n      <Grid>\n      <h1 className = \"Title\">\n        Resturant Data Helper\n      </h1>\n      <div className = \"Together\">\n      <Dropdown\n      className = \"Rpad\"\n      multiple\n      selection\n      options={getOptions}\n      placeholder='Choose Resturants'\n      />\n      <DatePicker\n      selected={selectedDate}\n      onChange={date => setSelectedDate(date)}\n      maxDate={new Date()}\n      showYearDropdown\n      scrollableMonthYearDropdown\n      isClearable\n      />\n      <div className = \"App-row\">\n      <div className = \"App\">\n      <h3>From:</h3>\n      <h3>To:</h3>\n      </div>\n      <div className = \"App\">\n      <TimePicker\n      className = \"App-bot\"\n      disableClock = { true }\n      clearIcon = { false }\n      />\n      <TimePicker\n      disableClock = { true }\n      clearIcon = { false }\n      />\n      </div>\n      </div>\n      <Dropdown\n      className = \"Rpad\"\n      selection\n      options={getMetrics}\n      placeholder='Choose Metric'\n      />\n      <Dropdown\n      className = \"Width-change.Dropdown\"\n      selection\n      options={getMeasures}\n      placeholder='Measure'\n      fluid\n      />\n      <Input\n      size = 'small'\n      placeholder = 'Value'\n      />\n      </div>\n      </Grid>\n    </div> */\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}