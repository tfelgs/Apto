{"ast":null,"code":"var _jsxFileName = \"/Users/dylanfelgenhauer/Desktop/react-app/react-application/search-tool/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport React, { useState, useEffect } from 'react';\nimport { Dropdown, Input, Grid, Button, Form, Select, Container, Segment, Divider } from 'semantic-ui-react';\nimport { getOptions, getMetrics, getMeasures, getTimeOptions, getOperatorOptions } from './Utility';\nimport 'react-datez/dist/css/react-datez.css';\nimport { ReactDatez } from 'react-datez';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [restaurantIds, setRestaurantIds] = useState([]);\n  const [fromHour, setFromHour] = useState(6);\n  const [toHour, setToHour] = useState(29);\n  const [criteria, setCriteria] = useState([{\n    metricCode: \"\",\n    compareType: \"\",\n    value: 0,\n    operatorType: \"\"\n  }]);\n\n  let handleChange = (index, data) => {\n    let newCriteria = [...criteria];\n    newCriteria[index][data.name] = data.value;\n    setCriteria(newCriteria);\n  };\n\n  let addCriteria = () => {\n    setCriteria([...criteria, {\n      metricCode: \"\",\n      compareType: \"\",\n      value: 0,\n      operatorType: \"\"\n    }]);\n  };\n\n  let removeCriteria = i => {\n    let newCriteria = [...criteria];\n    newCriteria.splice(i, 1);\n    setCriteria(newCriteria);\n  };\n\n  let onSubmit = () => {\n    userPush();\n  };\n\n  let createData = () => {\n    const initialFormData = {\n      restaurantIds: restaurantIds,\n      fromDate: startDate,\n      toDate: endDate,\n      fromHour: fromHour,\n      toHour: toHour,\n      metricCriteria: criteria\n    };\n    const myJson = JSON.stringify(initialFormData);\n    return myJson;\n  };\n\n  const userPush = async () => {\n    const response = await fetch('https://customsearchqueryapi.azurewebsites.net/Search/Query', {\n      method: 'POST',\n      body: JSON.stringify(example),\n      // string or object\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const myJson = await response.json(); //extract JSON from the http response\n\n    console.log(myJson);\n  };\n\n  const userPull = async () => {\n    const response = await fetch('https://customsearchqueryapi.azurewebsites.net/SEARCH/MetricDefinitions');\n    const myJson = await response.json(); //extract JSON from the http response\n  };\n\n  const example = {\n    \"restaurantIds\": [0],\n    \"fromDate\": \"2021-10-23T23:54:18.056Z\",\n    \"toDate\": \"2021-10-23T23:54:18.056Z\",\n    \"fromHour\": 0,\n    \"toHour\": 0,\n    \"metricCriteria\": [{\n      \"metricCode\": \"string\",\n      \"compareType\": \"Equal\",\n      \"value\": 0,\n      \"operatorType\": \"And\"\n    }]\n  };\n  useEffect(() => {\n    userPull();\n    console.log(\"Work\");\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(Segment, {\n            className: \"Segment\",\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              centered: true,\n              children: [/*#__PURE__*/_jsxDEV(Grid.Row, {\n                columns: \"1\",\n                children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n                  textAlign: \"center\",\n                  children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: \"Custom Search Query Tool\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n                columns: \"1\",\n                children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n                  children: /*#__PURE__*/_jsxDEV(Form, {\n                    onSubmit: () => onSubmit(),\n                    children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        style: {\n                          fontWeight: \"bold\"\n                        },\n                        children: \"Restaurant Id\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 104,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                        options: getOptions,\n                        placeholder: \"Select Restaurant Id\",\n                        multiple: true,\n                        selection: true,\n                        onChange: (event, data) => setRestaurantIds(data.value),\n                        value: restaurantIds\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 105,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 103,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                      children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n                        control: Select,\n                        label: \"Transaction Time Start\",\n                        options: getTimeOptions,\n                        value: fromHour,\n                        onChange: (event, data) => setFromHour(data.value)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 115,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                        control: Select,\n                        label: \"Transaction Time End\",\n                        options: getTimeOptions,\n                        value: toHour,\n                        onChange: (event, data) => setToHour(data.value)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 122,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          htmlFor: \"exampleDate2\",\n                          children: \"Start Date\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 130,\n                          columnNumber: 49\n                        }, this), /*#__PURE__*/_jsxDEV(ReactDatez, {\n                          name: \"dateInput\",\n                          startDate: \"01/01/2000\",\n                          endDate: new Date(),\n                          handleChange: value => {\n                            setStartDate(value);\n                          },\n                          value: startDate,\n                          allowPast: true,\n                          dateFormat: \"MM/DD/YYYY\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 131,\n                          columnNumber: 49\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 129,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          htmlFor: \"exampleDate2\",\n                          children: \"End Date\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 144,\n                          columnNumber: 49\n                        }, this), /*#__PURE__*/_jsxDEV(ReactDatez, {\n                          name: \"dateInput\",\n                          startDate: \"01/01/2000\",\n                          endDate: new Date(),\n                          handleChange: value => {\n                            setEndDate(value);\n                          },\n                          value: endDate,\n                          allowPast: true,\n                          dateFormat: \"MM/DD/YYYY\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 145,\n                          columnNumber: 49\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 143,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 114,\n                      columnNumber: 45\n                    }, this), criteria.map((crit, index) => /*#__PURE__*/_jsxDEV(Form.Group, {\n                      children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n                        name: \"metricCode\",\n                        control: Select,\n                        options: getMetrics,\n                        label: \"Metric to Measure by\",\n                        placeholder: \"Choose Metric\",\n                        value: crit.metricCode,\n                        onChange: (event, data) => handleChange(index, data)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 160,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                        name: \"compareType\",\n                        control: Select,\n                        label: \"Measure\",\n                        options: getMeasures,\n                        placeholder: \"Measure\",\n                        onChange: (event, data) => handleChange(index, data),\n                        value: crit.compareType\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 169,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                        name: \"value\",\n                        control: Input,\n                        label: \"Value\",\n                        placeholder: \"Value\",\n                        onChange: (event, data) => handleChange(index, data),\n                        value: crit.value\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 178,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                        name: \"operatorType\",\n                        control: Select,\n                        label: \"Operator\",\n                        options: getOperatorOptions,\n                        placeholder: \"Operator Options\",\n                        onChange: (event, data) => handleChange(index, data),\n                        value: crit.operatorType\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 186,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                        children: index ? /*#__PURE__*/_jsxDEV(Button, {\n                          onClick: () => removeCriteria(index),\n                          color: \"red\",\n                          children: \"Remove\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 198,\n                          columnNumber: 65\n                        }, this) : null\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 195,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 159,\n                      columnNumber: 53\n                    }, this)), /*#__PURE__*/_jsxDEV(Form.Group, {\n                      children: /*#__PURE__*/_jsxDEV(Form.Field, {\n                        children: /*#__PURE__*/_jsxDEV(Button, {\n                          className: \"ui button\",\n                          onClick: () => addCriteria(),\n                          color: \"violet\",\n                          children: \"Add Criteria\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 206,\n                          columnNumber: 53\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 205,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 204,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        color: \"olive\",\n                        type: \"submit\",\n                        children: \"Submit\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 210,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 209,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 102,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        hidden: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(Segment, {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Results\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"emCVFZ6wgMUCOlMHKPFkD7RxXcI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/dylanfelgenhauer/Desktop/react-app/react-application/search-tool/src/App.js"],"names":["React","useState","useEffect","Dropdown","Input","Grid","Button","Form","Select","Container","Segment","Divider","getOptions","getMetrics","getMeasures","getTimeOptions","getOperatorOptions","ReactDatez","App","startDate","setStartDate","endDate","setEndDate","restaurantIds","setRestaurantIds","fromHour","setFromHour","toHour","setToHour","criteria","setCriteria","metricCode","compareType","value","operatorType","handleChange","index","data","newCriteria","name","addCriteria","removeCriteria","i","splice","onSubmit","userPush","createData","initialFormData","fromDate","toDate","metricCriteria","myJson","JSON","stringify","response","fetch","method","body","example","headers","json","console","log","userPull","fontWeight","event","Date","map","crit"],"mappings":"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","sourcesContent":["import './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport React, { useState, useEffect } from 'react'\nimport { Dropdown, Input, Grid, Button, Form, Select, Container, Segment, Divider } from 'semantic-ui-react'\nimport { getOptions, getMetrics, getMeasures, getTimeOptions, getOperatorOptions } from './Utility';\nimport 'react-datez/dist/css/react-datez.css';\nimport { ReactDatez } from 'react-datez'\n\n\nfunction App() {\n  const [startDate, setStartDate] = useState(\"\")\n  const [endDate, setEndDate] = useState(\"\")\n  const [restaurantIds, setRestaurantIds] = useState([]);\n  const [fromHour, setFromHour] = useState(6);\n  const [toHour, setToHour] = useState(29);\n  const [criteria, setCriteria] = useState([{ metricCode: \"\", compareType : \"\", value: 0, operatorType: \"\" }])\n\nlet handleChange = (index, data) => {\n    let newCriteria = [...criteria];\n    newCriteria[index][data.name] = data.value;\n    setCriteria(newCriteria);\n}\n\nlet addCriteria = () => {\n    setCriteria([...criteria, { metricCode: \"\", compareType : \"\", value: 0, operatorType: \"\" }])\n}\n\nlet removeCriteria = (i) => {\n    let newCriteria = [...criteria];\n    newCriteria.splice(i, 1);\n    setCriteria(newCriteria)\n}\n\nlet onSubmit = () => {\n    userPush()\n}\n\nlet createData = () => {\n    const initialFormData = {\n        restaurantIds: restaurantIds,\n        fromDate: startDate,\n        toDate: endDate,\n        fromHour: fromHour,\n        toHour: toHour,\n        metricCriteria: criteria\n    };\n    const myJson = JSON.stringify(initialFormData)\n    return myJson\n}\nconst userPush = async () => {\n    const response = await fetch('https://customsearchqueryapi.azurewebsites.net/Search/Query', {\n      method: 'POST',\n      body: JSON.stringify(example), // string or object\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const myJson = await response.json(); //extract JSON from the http response\n    console.log(myJson)\n  }\n\nconst userPull = async () => {\n    const response = await fetch('https://customsearchqueryapi.azurewebsites.net/SEARCH/MetricDefinitions');\n    const myJson = await response.json(); //extract JSON from the http response\n  }\n\nconst example = {\n    \"restaurantIds\": [0],\n    \"fromDate\": \"2021-10-23T23:54:18.056Z\",\n    \"toDate\": \"2021-10-23T23:54:18.056Z\",\n    \"fromHour\": 0,\n    \"toHour\": 0,\n    \"metricCriteria\": [\n      {\n        \"metricCode\": \"string\",\n        \"compareType\": \"Equal\",\n        \"value\": 0,\n        \"operatorType\": \"And\"\n      }\n    ]\n  }\n\n  useEffect(() => {\n      userPull()\n    console.log(\"Work\");\n}, []);\n\n  return (\n    <div className=\"App\">\n            <Grid>\n                <Grid.Row>\n                    <Container>\n                        <Segment className=\"Segment\">\n                            <Grid centered>\n                                <Grid.Row columns=\"1\">\n                                    <Grid.Column textAlign=\"center\">\n                                        <h3>Custom Search Query Tool</h3>\n                                    </Grid.Column>\n                                </Grid.Row>\n                                <Grid.Row columns=\"1\">\n                                    <Grid.Column>\n                                        <Form onSubmit={() => onSubmit()} >\n                                            <Form.Field>\n                                                <label style={{fontWeight: \"bold\"}}>Restaurant Id</label>\n                                                <Dropdown\n                                                    options={getOptions}\n                                                    placeholder={\"Select Restaurant Id\"}\n                                                    multiple\n                                                    selection\n                                                    onChange={(event, data) => setRestaurantIds(data.value)}\n                                                    value={restaurantIds}\n                                                />\n                                            </Form.Field>\n                                            <Form.Group>\n                                                <Form.Field\n                                                    control={Select}\n                                                    label={\"Transaction Time Start\"}\n                                                    options={getTimeOptions}\n                                                    value={fromHour}\n                                                    onChange={(event, data) => setFromHour(data.value)}\n                                                />\n                                                <Form.Field\n                                                    control={Select}\n                                                    label={\"Transaction Time End\"}\n                                                    options={getTimeOptions}\n                                                    value={toHour}\n                                                    onChange={(event, data) => setToHour(data.value)}\n                                                />\n                                                <Form.Field>\n                                                <label htmlFor=\"exampleDate2\">Start Date</label>\n                                                <ReactDatez\n                                                    name=\"dateInput\"\n                                                    startDate=\"01/01/2000\"\n                                                    endDate= {new Date()}\n                                                    handleChange={value => {\n                                                    setStartDate(value);\n                                                    }}\n                                                    value={startDate}\n                                                    allowPast= { true }\n                                                    dateFormat= \"MM/DD/YYYY\"\n                                                />\n                                                </Form.Field>\n                                                <Form.Field>\n                                                <label htmlFor=\"exampleDate2\">End Date</label>\n                                                <ReactDatez\n                                                    name=\"dateInput\"\n                                                    startDate=\"01/01/2000\"\n                                                    endDate= {new Date()}\n                                                    handleChange={value => {\n                                                    setEndDate(value);\n                                                    }}\n                                                    value={endDate}\n                                                    allowPast= { true }\n                                                    dateFormat= \"MM/DD/YYYY\"\n                                                />\n                                                </Form.Field>\n                                            </Form.Group>\n                                            {criteria.map((crit, index) => (\n                                                    <Form.Group>\n                                                        <Form.Field\n                                                            name=\"metricCode\"\n                                                            control={Select}\n                                                            options={getMetrics}\n                                                            label={\"Metric to Measure by\"}\n                                                            placeholder='Choose Metric'\n                                                            value={crit.metricCode}\n                                                            onChange={(event, data) => handleChange(index, data)}\n                                                        />\n                                                        <Form.Field\n                                                            name=\"compareType\"\n                                                            control={Select}\n                                                            label={\"Measure\"}\n                                                            options={getMeasures}\n                                                            placeholder='Measure'\n                                                            onChange={(event, data) => handleChange(index, data)}\n                                                            value={crit.compareType}\n                                                        />\n                                                        <Form.Field\n                                                            name=\"value\"\n                                                            control={Input}\n                                                            label={\"Value\"}\n                                                            placeholder='Value'\n                                                            onChange={(event, data) => handleChange(index, data)}\n                                                            value={crit.value}\n                                                        />\n                                                        <Form.Field\n                                                            name=\"operatorType\"\n                                                            control={Select}\n                                                            label={\"Operator\"}\n                                                            options={getOperatorOptions}\n                                                            placeholder='Operator Options'\n                                                            onChange={(event, data) => handleChange(index, data)}\n                                                            value={crit.operatorType}\n                                                        />\n                                                        <Form.Field>\n                                                            {\n                                                                index ?\n                                                                <Button onClick={() => removeCriteria(index)}  color=\"red\">Remove</Button>\n                                                                : null\n                                                            }\n                                                        </Form.Field>\n                                                    </Form.Group>\n                                                ))}\n                                            <Form.Group>\n                                                <Form.Field>\n                                                    <Button className='ui button' onClick={() => addCriteria()} color=\"violet\">Add Criteria</Button>\n                                                </Form.Field>\n                                            </Form.Group>\n                                            <Form.Field>\n                                                <Button color=\"olive\" type=\"submit\">\n                                                    Submit\n                                                </Button>\n                                            </Form.Field>\n                                        </Form>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                        </Segment>\n                    </Container>\n                </Grid.Row>\n                <Divider hidden></Divider>\n                <Grid.Row>\n                    <Container>\n                        <Segment>\n                            <h3>Results</h3>\n                        </Segment>\n                    </Container>\n                </Grid.Row>\n            </Grid>\n        </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}