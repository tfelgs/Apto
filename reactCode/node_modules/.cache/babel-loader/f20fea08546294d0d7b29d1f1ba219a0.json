{"ast":null,"code":"var _jsxFileName = \"/Users/dylanfelgenhauer/Desktop/react-app/react-application/search-tool/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport React, { useState, useEffect } from 'react';\nimport { Dropdown, Input, Grid, Button, Form, Select, Container, Segment, Divider } from 'semantic-ui-react';\nimport { getOptions, getMetrics, getMeasures, getTimeOptions, getOperatorOptions } from './Utility';\nimport 'react-datez/dist/css/react-datez.css';\nimport { ReactDatez } from 'react-datez';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  const [restaurantIds, setRestaurantIds] = useState([]);\n  const [fromHour, setFromHour] = useState(6);\n  const [toHour, setToHour] = useState(29);\n  const [metrics, setMetrics] = useState(null);\n  const [measures, setMeasures] = useState(null);\n  const [val, setVal] = useState(null);\n  const [operator, setOperator] = useState(null);\n  const [criteria, setCriteria] = useState([{\n    metrics: \"\",\n    measures: \"\",\n    value: \"\",\n    operator: \"\"\n  }]);\n\n  let handleChange = (i, e) => {\n    let newCriteria = [...criteria];\n    newCriteria[i][e.target.name] = e.target.value;\n    setCriteria(newCriteria);\n  };\n\n  let addCriteria = () => {\n    setCriteria([...criteria, {\n      metrics: \"\",\n      measures: \"\",\n      value: \"\",\n      operator: \"\"\n    }]);\n  };\n\n  let removeCriteria = i => {\n    let newCriteria = [...criteria];\n    newCriteria.splice(i, 1);\n    setCriteria(newCriteria);\n  };\n\n  const initialFormData = {\n    restaurantIds: [],\n    fromDate: \"\",\n    toDate: \"\",\n    fromHour: 6,\n    toHour: 29,\n    metricCriteria: [{\n      metricCode: \"\",\n      compareType: \"\",\n      value: \"\",\n      operatorType: \"And\"\n    }]\n  };\n\n  const userAction = async () => {\n    const response = await fetch('https://customsearchqueryapi.azurewebsites.net/SEARCH/MetricDefinitions');\n    const myJson = await response.json(); //extract JSON from the http response\n\n    console.log(\"Works\");\n  };\n\n  useEffect(() => {\n    userAction();\n    console.log(\"Work\");\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(Segment, {\n            className: \"Segment\",\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              centered: true,\n              children: [/*#__PURE__*/_jsxDEV(Grid.Row, {\n                columns: \"1\",\n                children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n                  textAlign: \"center\",\n                  children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: \"Custom Search Query Tool\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 72,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n                columns: \"1\",\n                children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n                  children: /*#__PURE__*/_jsxDEV(Form\n                  /* onSubmit={() => onSubmit()} */\n                  , {\n                    children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        style: {\n                          fontWeight: \"bold\"\n                        },\n                        children: \"Restaurant Id\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 79,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                        options: getOptions,\n                        placeholder: \"Select Restaurant Id\",\n                        multiple: true,\n                        selection: true,\n                        onChange: (event, data) => setRestaurantIds(data.value),\n                        value: restaurantIds\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 80,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 78,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                      children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n                        control: Select,\n                        label: \"Transaction Time Start\",\n                        options: getTimeOptions,\n                        value: fromHour,\n                        onChange: (event, data) => setFromHour(data.value)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 90,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                        control: Select,\n                        label: \"Transaction Time End\",\n                        options: getTimeOptions,\n                        value: toHour,\n                        onChange: (event, data) => setToHour(data.value)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 97,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          htmlFor: \"exampleDate2\",\n                          children: \"Start Date\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 105,\n                          columnNumber: 49\n                        }, this), /*#__PURE__*/_jsxDEV(ReactDatez, {\n                          name: \"dateInput\",\n                          startDate: \"01/01/2000\",\n                          endDate: new Date(),\n                          handleChange: value => {\n                            setStartDate(value);\n                          },\n                          value: startDate,\n                          allowPast: true,\n                          dateFormat: \"MM/DD/YYYY\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 106,\n                          columnNumber: 49\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 104,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          htmlFor: \"exampleDate2\",\n                          children: \"End Date\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 119,\n                          columnNumber: 49\n                        }, this), /*#__PURE__*/_jsxDEV(ReactDatez, {\n                          name: \"dateInput\",\n                          startDate: \"01/01/2000\",\n                          endDate: new Date(),\n                          handleChange: value => {\n                            setEndDate(value);\n                          },\n                          value: endDate,\n                          allowPast: true,\n                          dateFormat: \"MM/DD/YYYY\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 120,\n                          columnNumber: 49\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 118,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 89,\n                      columnNumber: 45\n                    }, this), criteria.map((crit, index) => /*#__PURE__*/_jsxDEV(Form.Group, {\n                      children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n                        control: Select,\n                        options: getMetrics,\n                        label: \"Metric to Measure by\",\n                        placeholder: \"Choose Metric\",\n                        onChange: (event, data) => setMetrics(data.metrics),\n                        value: metrics\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 135,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                        control: Select,\n                        label: \"Measure\",\n                        options: getMeasures,\n                        placeholder: \"Measure\",\n                        onChange: (event, data) => setMeasures(data.measures),\n                        value: measures\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 143,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                        control: Input,\n                        label: \"Value\",\n                        placeholder: \"Value\",\n                        onChange: (event, data) => setVal(data.val),\n                        value: val\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 151,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                        control: Select,\n                        label: \"Operator\",\n                        options: getOperatorOptions,\n                        placeholder: \"Operator Options\",\n                        onChange: (event, data) => setOperator(data.operator),\n                        value: operator\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 158,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                        children: index ? /*#__PURE__*/_jsxDEV(Button, {\n                          onClick: () => removeCriteria(index),\n                          color: \"red\",\n                          children: \"Remove\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 169,\n                          columnNumber: 65\n                        }, this) : null\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 166,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 134,\n                      columnNumber: 53\n                    }, this)), /*#__PURE__*/_jsxDEV(Form.Group, {\n                      children: /*#__PURE__*/_jsxDEV(Form.Field, {\n                        children: /*#__PURE__*/_jsxDEV(Button, {\n                          className: \"ui button\",\n                          onClick: () => addCriteria(),\n                          color: \"violet\",\n                          children: \"Add Criteria\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 177,\n                          columnNumber: 53\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 176,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 175,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        color: \"olive\",\n                        type: \"submit\",\n                        children: \"Submit\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 181,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 180,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 77,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        hidden: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(Segment, {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Results\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"tdZsYMzdoDI6p2mggv0jcw2j6T0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/dylanfelgenhauer/Desktop/react-app/react-application/search-tool/src/App.js"],"names":["React","useState","useEffect","Dropdown","Input","Grid","Button","Form","Select","Container","Segment","Divider","getOptions","getMetrics","getMeasures","getTimeOptions","getOperatorOptions","ReactDatez","App","startDate","setStartDate","endDate","setEndDate","restaurantIds","setRestaurantIds","fromHour","setFromHour","toHour","setToHour","metrics","setMetrics","measures","setMeasures","val","setVal","operator","setOperator","criteria","setCriteria","value","handleChange","i","e","newCriteria","target","name","addCriteria","removeCriteria","splice","initialFormData","fromDate","toDate","metricCriteria","metricCode","compareType","operatorType","userAction","response","fetch","myJson","json","console","log","fontWeight","event","data","Date","map","crit","index"],"mappings":"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","sourcesContent":["import './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport React, { useState, useEffect } from 'react'\nimport { Dropdown, Input, Grid, Button, Form, Select, Container, Segment, Divider } from 'semantic-ui-react'\nimport { getOptions, getMetrics, getMeasures, getTimeOptions, getOperatorOptions } from './Utility';\nimport 'react-datez/dist/css/react-datez.css';\nimport { ReactDatez } from 'react-datez'\n\n\nfunction App() {\n  const [startDate, setStartDate] = useState(null)\n  const [endDate, setEndDate] = useState(null)\n  const [restaurantIds, setRestaurantIds] = useState([]);\n  const [fromHour, setFromHour] = useState(6);\n  const [toHour, setToHour] = useState(29);\n  const [metrics, setMetrics] = useState(null);\n  const [measures, setMeasures] = useState(null);\n  const [val, setVal] = useState(null);\n  const [operator, setOperator] = useState(null);\n  const [criteria, setCriteria] = useState([{ metrics: \"\", measures : \"\", value: \"\", operator: \"\" }])\n\n  let handleChange = (i, e) => {\n    let newCriteria = [...criteria];\n    newCriteria[i][e.target.name] = e.target.value;\n    setCriteria(newCriteria);\n  }\n\nlet addCriteria = () => {\n    setCriteria([...criteria, { metrics: \"\", measures : \"\", value: \"\", operator: \"\" }])\n  }\n\nlet removeCriteria = (i) => {\n    let newCriteria = [...criteria];\n    newCriteria.splice(i, 1);\n    setCriteria(newCriteria)\n}\n\nconst initialFormData = {\n    restaurantIds: [],\n    fromDate: \"\",\n    toDate: \"\",\n    fromHour: 6,\n    toHour: 29,\n    metricCriteria: [{\n        metricCode: \"\",\n        compareType: \"\",\n        value: \"\",\n        operatorType: \"And\"\n    }]\n};\n\nconst userAction = async () => {\n    const response = await fetch('https://customsearchqueryapi.azurewebsites.net/SEARCH/MetricDefinitions');\n    const myJson = await response.json(); //extract JSON from the http response\n    console.log(\"Works\")\n  }\n\n  useEffect(() => {\n      userAction()\n    console.log(\"Work\");\n}, []);\n\n  return (\n    <div className=\"App\">\n            <Grid>\n                <Grid.Row>\n                    <Container>\n                        <Segment className=\"Segment\">\n                            <Grid centered>\n                                <Grid.Row columns=\"1\">\n                                    <Grid.Column textAlign=\"center\">\n                                        <h3>Custom Search Query Tool</h3>\n                                    </Grid.Column>\n                                </Grid.Row>\n                                <Grid.Row columns=\"1\">\n                                    <Grid.Column>\n                                        <Form /* onSubmit={() => onSubmit()} */>\n                                            <Form.Field>\n                                                <label style={{fontWeight: \"bold\"}}>Restaurant Id</label>\n                                                <Dropdown\n                                                    options={getOptions}\n                                                    placeholder={\"Select Restaurant Id\"}\n                                                    multiple\n                                                    selection\n                                                    onChange={(event, data) => setRestaurantIds(data.value)}\n                                                    value={restaurantIds}\n                                                />\n                                            </Form.Field>\n                                            <Form.Group>\n                                                <Form.Field\n                                                    control={Select}\n                                                    label={\"Transaction Time Start\"}\n                                                    options={getTimeOptions}\n                                                    value={fromHour}\n                                                    onChange={(event, data) => setFromHour(data.value)}\n                                                />\n                                                <Form.Field\n                                                    control={Select}\n                                                    label={\"Transaction Time End\"}\n                                                    options={getTimeOptions}\n                                                    value={toHour}\n                                                    onChange={(event, data) => setToHour(data.value)}\n                                                />\n                                                <Form.Field>\n                                                <label htmlFor=\"exampleDate2\">Start Date</label>\n                                                <ReactDatez\n                                                    name=\"dateInput\"\n                                                    startDate=\"01/01/2000\"\n                                                    endDate= {new Date()}\n                                                    handleChange={value => {\n                                                    setStartDate(value);\n                                                    }}\n                                                    value={startDate}\n                                                    allowPast= { true }\n                                                    dateFormat= \"MM/DD/YYYY\"\n                                                />\n                                                </Form.Field>\n                                                <Form.Field>\n                                                <label htmlFor=\"exampleDate2\">End Date</label>\n                                                <ReactDatez\n                                                    name=\"dateInput\"\n                                                    startDate=\"01/01/2000\"\n                                                    endDate= {new Date()}\n                                                    handleChange={value => {\n                                                    setEndDate(value);\n                                                    }}\n                                                    value={endDate}\n                                                    allowPast= { true }\n                                                    dateFormat= \"MM/DD/YYYY\"\n                                                />\n                                                </Form.Field>\n                                            </Form.Group>\n                                            {criteria.map((crit, index) => (\n                                                    <Form.Group>\n                                                        <Form.Field\n                                                            control={Select}\n                                                            options={getMetrics}\n                                                            label={\"Metric to Measure by\"}\n                                                            placeholder='Choose Metric'\n                                                            onChange={(event, data) => setMetrics(data.metrics)}\n                                                            value={metrics}\n                                                        />\n                                                        <Form.Field\n                                                            control={Select}\n                                                            label={\"Measure\"}\n                                                            options={getMeasures}\n                                                            placeholder='Measure'\n                                                            onChange={(event, data) => setMeasures(data.measures)}\n                                                            value={measures}\n                                                        />\n                                                        <Form.Field\n                                                            control={Input}\n                                                            label={\"Value\"}\n                                                            placeholder='Value'\n                                                            onChange={(event, data) => setVal(data.val)}\n                                                            value={val}\n                                                        />\n                                                        <Form.Field\n                                                            control={Select}\n                                                            label={\"Operator\"}\n                                                            options={getOperatorOptions}\n                                                            placeholder='Operator Options'\n                                                            onChange={(event, data) => setOperator(data.operator)}\n                                                            value={operator}\n                                                        />\n                                                        <Form.Field>\n                                                            {\n                                                                index ?\n                                                                <Button onClick={() => removeCriteria(index)}  color=\"red\">Remove</Button>\n                                                                : null\n                                                            }\n                                                        </Form.Field>\n                                                    </Form.Group>\n                                                ))}\n                                            <Form.Group>\n                                                <Form.Field>\n                                                    <Button className='ui button' onClick={() => addCriteria()} color=\"violet\">Add Criteria</Button>\n                                                </Form.Field>\n                                            </Form.Group>\n                                            <Form.Field>\n                                                <Button color=\"olive\" type=\"submit\">\n                                                    Submit\n                                                </Button>\n                                            </Form.Field>\n                                        </Form>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                        </Segment>\n                    </Container>\n                </Grid.Row>\n                <Divider hidden></Divider>\n                <Grid.Row>\n                    <Container>\n                        <Segment>\n                            <h3>Results</h3>\n                        </Segment>\n                    </Container>\n                </Grid.Row>\n            </Grid>\n        </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}